// noinspection JSUnusedGlobalSymbols

interface DrawEntry {
	/** Determines whether a DrawEntry will be rendered. */
	Visible: boolean;
	/** Determines the order in which a DrawEntry is rendered relative to other GUIs. */
	ZIndex: number;
	/** @deprecated Use {@link DrawEntry.Opacity} instead.
	 * @description A V2-era misnomer and now alias for 'Opacity'.
	 */
	Transparency: number;
	/** A value between 0 and 1 that indicates the opacity of a DrawEntry, where 0 is fully transparent and 1 is fully opaque. */
	Opacity: number;
	/** Determines the color of a DrawEntry. */
	Color: Color3;
	/** Used to set Color via a Vector3. @writeonly */
	ColorVec3: undefined | Vector3; // TODO: implement write-only
	/** Disables a DrawEntry. */
	Remove(): void;
	/** An alias for `Remove`. */
	Destroy(): void;
	/** Moves a DrawEntry to the front of the current ZIndex's draw list. */
	MoveToFront(): void;
	/** Moves a DrawEntry to the back of the current ZIndex's draw list. */
	MoveToBack(): void;
}
interface Line extends DrawEntry {
	/** Determines the thickness of a Line in pixels. */
	Thickness: number;
	/** Determines the starting position of a Line. */
	From: Vector2;
	/** Determines the end position of a Line. */
	To: Vector2;
}
interface Text extends DrawEntry {
	/** Determines the text to be displayed. */
	Text: string;
	/** Determines the Vector2 space occupied by a Text object. */
	readonly TextBounds: Vector2;
	/** Determines the font size of a Text object. */
	Size: number;
	/** Determines the font of a Text object. */
	Font: Fonts;
	/** Determines whether the displayed text is centered. */
	Centered: boolean;
	/** Determines whether the displayed text is outlined. */
	Outlined: boolean;
	/** Determines the outline color of the displayed text. */
	OutlineColor: Color3;
	/** Determines the position of a Text object. */
	Position: Vector2;
}
interface Image extends DrawEntry {
	/** Determines the raw image data for an Image. */
	Data: string;
	/** Determines the dimensions of the image held by the Data property. */
	readonly ImageSize: Vector2;
	/** Determines the size of an Image. */
	Size: Vector2;
	/** Determines the position of an Image. */
	Position: Vector2;
	/** Determines the roundness of an Image. */
	Rounding: number;
}
interface Circle extends DrawEntry {
	/** Determines the thickness of a Circle. */
	Thickness: number;
	/** Determines the number of segments that make up a Circle. */
	NumSides: number;
	/** Determines the radius of a Circle. */
	Radius: number;
	/** Determines whether a Circle is filled. */
	Filled: boolean;
	/** Determines the position of a Circle. */
	Position: Vector2;
}
interface Square extends DrawEntry {
	/** Determines the thickness of a Square. */
	Thickness: number;
	/** Determines the size of a Square. */
	Size: Vector2;
	/** Determines the position of a Square. */
	Position: Vector2;
	/** Determines whether a Square is filled. */
	Filled: boolean;
}
interface Triangle extends DrawEntry {
	/** Determines a Triangle's thickness. */
	Thickness: number;
	/** The position of a Triangle's first point. */
	PointA: Vector2;
	/** The position of a Triangle's second point. */
	PointB: Vector2;
	/** The position of a Triangle's third point. */
	PointC: Vector2;
	/** Determines whether a Triangle is filled. */
	Filled: boolean;
}
interface Quad extends DrawEntry {
	/** Determines a Quad's thickness. */
	Thickness: number;
	/** The position of a Quad's first point. */
	PointA: Vector2;
	/** The position of a Quad's second point. */
	PointB: Vector2;
	/** The position of a Quad's third point. */
	PointC: Vector2;
	/** The position of a Quad's fourth point. */
	PointD: Vector2;
	/** Determines whether a Quad is filled. */
	Filled: boolean;
}
declare const Line: { new (): Line };
declare const Text: { new (): Text };
declare const Image: { new (): Image };
declare const Circle: { new (): Circle };
declare const Square: { new (): Square };
declare const Triangle: { new (): Triangle };
declare const Quad: { new (): Quad };
