// noinspection JSUnusedGlobalSymbols

interface Point {
	/** A Point's screen position. */
	readonly ScreenPos: Vector2;
	/** Determines whether a Point is rendered. */
	readonly Visible: boolean;
	/** Toggles the overriding of a Point's color. Used when rendering a Point using a triangulated PolylineDynamic. */
	HasColorOverride: boolean;
	/** Overrides a Point's color when `HasColorOverride` is true. */
	ColorOverride: Color3;
	/** Sets `ColorOverride` using a Vector3. Write-only. @writeonly */
	ColorOverrideVec3: undefined | Vector3; // TODO: implement write-only (Not possible in TS https://github.com/microsoft/TypeScript/issues/21759)
	/** Determines the opacity of a Point's override color. */
	ColorOverrideOpacity: number;
}
/** A point in two-dimensional space. */
interface Point2D extends Point {
	/** A Point2D's position. */
	Point: UDim2;
	/** Allows you to get/set `Point` directly as `Vector2`. **Returns only the offset fields of `UDim2`!** */
	PointVec2: Vector2;
}
/** A point in three-dimensional space. */
interface Point3D extends Point {
	/** A Point3D's position. */
	Point: UDim2;
}
/** A dynamic point whose position is linked to an instance's 'CFrame' property. */
interface PointInstance extends Point {
	/** Determines the instance a PointInstance will track. */
	Instance: Instance;
	/** Describes the offset from a PointInstance's instance. */
	Offset: CFrame;
	/** Describes how the rotation of Offset affects the WorldPos. Defaults to CameraRelative. */
	RotationType: CFrameRotationType;
	/** Describes a PointInstance's world position. Read only. */
	readonly WorldPos: Vector3;
}
/** A dynamic point whose position is linked to the user's mouse. */
interface PointMouse extends Point {
	// no properties
}
/** A dynamic point whose position is offset from another `Point`. */
interface PointOffset extends Point {
	/** Holds a reference to a `Point`. */
	Point: Point;
	/** Describes an offset to the `Point`. */
	Offset: Vector2;
}
declare const Point2D: { new (): Point2D; new (point: UDim2): Point2D; new (point: Vector2): Point2D; new (x: number, y: number): Point2D; new (x_scale: number, x_offset: number, y_scale: number, y_offset: number): Point2D };
declare const Point3D: { new (): Point3D; new (point: Vector3): Point3D; new (x: number, y: number, z: number): Point3D };
declare const PointInstance: { new (instance?: Instance, offset?: CFrame): PointInstance };
declare const PointMouse: { new (): PointMouse };
declare const PointOffset: { new (): PointOffset; new (point: Point): PointOffset; new (point: Point, offset: Vector2): PointOffset; new (point: Point, x_offset: number, y_offset: number): PointOffset };
