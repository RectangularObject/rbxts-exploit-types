// noinspection JSUnusedGlobalSymbols

interface DrawEntryDynamic {
	/** Determines whether a DrawEntryDynamic will be rendered. */
	Visible: boolean;
	/** Determines the order in which a DrawEntryDynamic is rendered relative to other GUIs. */
	ZIndex: number;
	/** A value between 0 and 1 that indicates the opacity of a DrawEntryDynamic. */
	Opacity: number;
	/** Determines the color of a DrawEntryDynamic. */
	Color: Color3;
	/** Whether a DrawEntryDynamic is outlined. */
	Outlined: boolean;
	/** A value between 0 and 1 that indicates the opacity of a DrawEntryDynamic's outline. */
	OutlineOpacity: number;
	/** The thickness of a DrawEntryDynamic's outline, in pixels. */
	OutlineThickness: number;
	/** The color of a DrawEntryDynamic's outline. */
	OutlineColor: Color3;
	/** Moves a DrawEntryDynamic to the front of the current ZIndex's draw list. */
	MoveToFront(): void;
	/** Moves a DrawEntryDynamic to the back of the current ZIndex's draw list. */
	MoveToBack(): void;
}
interface LineDynamic extends DrawEntryDynamic {
	/** Determines the thickness of a LineDynamic in pixels. */
	Thickness: number;
	/** Determines the starting `Point` of a LineDynamic. */
	From: Point;
	/** Determines the end `Point` of a LineDynamic. */
	To: Point;
}
interface PolyLineDynamic extends DrawEntryDynamic {
	/** Determines the thickness of a PolyLineDynamic in pixels. */
	Thickness: number;
	/** Determines how a PolyLineDynamic is filled. */
	FillType: PolyLineFillType;
	/** The array of points that makeup a PolyLineDynamic. */
	Points: Point[];
	/** Used to re-triangulate a PolyLineDynamic when 'FillType' is set to `PolyLineFillType.Triangulated`. */
	ReTriangulate(): void;
	/** Sets a PolyLineDynamic's points. */
	SetPoints(points: Point[]): void;
}
interface TextDynamic extends DrawEntryDynamic {
	/** Determines the text to be displayed. */
	Text: string;
	/** Indicates the Vector2 space occupied by a TextDynamic. */
	readonly TextBound: Vector2;
	/** Determines the font size of a TextDynamic's text. */
	Size: number;
	/** Determines the font of a TextDynamic's text. */
	Font: Fonts;
	/** Determines the `Point` of a TextDynamic object. */
	Position: Point;
	/** Determines the x-axis alignment of a TextDynamic's position. */
	XAlignment: XAlignment;
	/** Determines the y-axis alignment of a TextDynamic's position. */
	YAlignment: YAlignment;
	/** Determines the x-axis alignment of a TextDynamic's text when there are multiple lines. */
	TextXAlignment: XAlignment;
}
interface CircleDynamic extends DrawEntryDynamic {
	/** Determines the thickness of a CircleDynamic. */
	Thickness: number;
	/** Determines the number of segments that make up a CircleDynamic. */
	NumSides: number;
	/** Determines the radius of a CircleDynamic. Only used if [`Edge`]{@link Edge} is nil. */
	Radius: number;
	/** Determines whether a CircleDynamic is filled. */
	Filled: boolean;
	/** Determines a CircleDynamic's center `Point`. */
	Position: Point;
	/** Determines a CircleDynamic's edge `Point`. If this field is set to nil, [`Radius`]{@link Radius} is used. */
	Edge: Point;
	XAlignment: XAlignment;
	YAlignment: YAlignment;
}
interface RectDynamicBase extends DrawEntryDynamic {
	/** A RectDynamicBase's size. Only used if [`BottomRight`]{@link BottomRight} is not set. */
	Size: Vector2;
	/** The RectDynamicBase root position. */
	Position: Point;
	/** If set, the bottom-right corner of the `RectDynamicBase`. When used, `Position` ignores alignment and is used as the top-left corner. */
	BottomRight: Point;
	/** How a RectDynamicBase is aligned on the x-axis relative to its Position. */
	XAlignment: XAlignment;
	/** How a RectDynamicBase is aligned on the y-axis relative to its Position. */
	YAlignment: YAlignment;
}
interface RectDynamic extends RectDynamicBase {
	/** The thickness of a RectDynamic, in pixels. */
	Thickness: number;
	/** Whether or not a RectDynamic is filled. */
	Filled: boolean;
	/** Describes the roundness of a RectDynamic's corners. */
	Rounding: number;
}
interface GradientRectDynamic extends RectDynamicBase {
	/** Describes a GradientRectDynamic's upper-left color. */
	ColorUpperLeft: Color3;
	/** Describes a GradientRectDynamic's upper-right color. */
	ColorUpperRight: Color3;
	/** Describes a GradientRectDynamic's bottom-left color. */
	ColorBottomLeft: Color3;
	/** Describes a GradientRectDynamic's bottom-right color. */
	ColorBottomRight: Color3;
	/** Describes a GradientRectDynamic's upper-left opacity. */
	OpacityUpperLeft: number;
	/** Describes a GradientRectDynamic's upper-right opacity. */
	OpacityUpperRight: number;
	/** Describes a GradientRectDynamic's bottom-left opacity. */
	OpacityBottomLeft: number;
	/** Describes a GradientRectDynamic's bottom-right opacity. */
	OpacityBottomRight: number;
	/** Affects the overall opacity of a GradientRectDynamic. */
	Opacity: number;
}
interface ImageDynamic extends RectDynamicBase {
	/** Sets the raw image data for an ImageDynamic. Write-only. @writeonly */
	Image: undefined | string; // TODO: implement write-only (Not possible in TS)
	/** Returns the dimensions of the image held by the Image property. */
	readonly ImageSize: Vector2;
	/** Indicates the roundness of an ImageDynamic. */
	Rounding: number;
}
declare const LineDynamic: { new (): LineDynamic; new (p1: Point, p2: Point): LineDynamic };
declare const PolyLineDynamic: { new (point?: Point[]): PolyLineDynamic };
declare const TextDynamic: { new (point?: Point): TextDynamic };
declare const CircleDynamic: { new (point?: Point): CircleDynamic };
declare const RectDynamic: { new (point?: Point): RectDynamic };
declare const GradientRectDynamic: { new (point?: Point): GradientRectDynamic };
declare const ImageDynamic: { new (point?: Point): ImageDynamic };
