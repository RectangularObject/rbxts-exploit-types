// noinspection JSUnusedGlobalSymbols

interface RenderObject {
	/** Determines whether a RenderObject is displayed. */
	Visible: boolean;
}
interface RenderButton extends RenderObject {
	/** Determines a RenderButton's text label. */
	Label: string;
	/** Determines the size of a RenderButton. */
	Size: Vector2;
	/** Fires on button-press. */
	OnUpdated: SynSignal;
}
interface RenderColorButton extends RenderObject {
	/** Determines the description RenderColorButton when you hover over it. */
	Description: string;
	/** Determines the size of a RenderColorButton. */
	Size: Vector2;
	/** Describes the color of a RenderColorButton. */
	Color: Color3;
	/** A RenderColorButton's opacity. */
	Alpha: number;
	/** Fires on button-press. */
	OnUpdated: SynSignal;
}
interface RenderCheckBox extends RenderObject {
	/** Determines a RenderCheckBox's text label. */
	Label: string;
	/** Whether a RenderCheckBox is checked. */
	Value: boolean;
	/** Fires on checkbox-toggle. */
	OnUpdated: SynSignal;
}
interface RenderColorPicker extends RenderObject {
	/** Determines a RenderColorPicker's text label. */
	Label: string;
	/** The currently selected color. */
	Color: Color3;
	/** The currently selected alpha value. */
	Alpha: number;
	/** Toggles a RenderColorPicker's alpha picker. */
	UseAlpha: boolean;
	/** Affects the arguments passed to the `OnUpdated` event. Default true. */
	ReturnInt: boolean;
	/** Fired upon color change. If `ReturnInt` is true, `r`, `g`, `b`, and `a` are integer values (0-255). */
	OnUpdated: SynSignal;
}
interface RenderCombo extends RenderObject {
	/** The RenderCombo's label. */
	Label: string;
	/** An array of strings representing a RenderCombo's choices. */
	Items: object;
	/** The index of the currently selected combo item. */
	SelectedItem: number;
	/** Fired upon a change in selection. */
	OnUpdated: SynSignal;
}
interface RenderDrag extends RenderObject {
	/** A RenderDrag's label. */
	Label: string;
	/** The drag input's scaling speed. */
	Speed: number;
	/** The drag input's minimum value. */
	Min: number;
	/** The drag input's maximum value. */
	Max: number;
	/** The current value of the drag input. */
	Value: number;
	/** Determines whether `Value` should be clamped to [`Min`, `Max`] when set manually. */
	Clamped: boolean;
	/** Fired upon a change in value. */
	OnUpdated: SynSignal;
}
interface RenderIntDrag extends RenderDrag {}
interface RenderTextBox extends RenderObject {
	/** The RenderTextBox's label. */
	Label: string;
	/** The text box's max length, a number between 0 and 16384, inclusive. Defaults to 16384. */
	MaxTextLength: number;
	/** The RenderTextBox's text input. */
	Value: string;
	/** Fired upon a change in text. */
	OnUpdated: SynSignal;
}
interface RenderSeparator extends RenderObject {}
interface RenderLabel extends RenderObject {
	// RenderLabel isn't documented, this is a guess on what property(s) it could have
	/** The RenderLabel's Label */
	Label: string;
}
interface RenderSlider extends RenderObject {
	/** A RenderSlider's label. */
	Label: string;
	/** The slider's minimum value. */
	Min: number;
	/** The slider's maximum value. */
	Max: number;
	/** The current value of the slider. */
	Value: number;
	/** Determines whether `Value` should be clamped to [`Min`, `Max`] when set manually with Ctrl+Click. */
	Clamped: boolean;
	/** Fired upon a change in value. */
	OnUpdated: SynSignal;
}
interface RenderIntSlider extends RenderSlider {}
interface RenderSelectable extends RenderObject {
	/** A RenderSelectable's label. */
	Label: string;
	/** A RenderSelectable's size. */
	Size: Vector2;
	/** Whether this RenderSelectable is selected. */
	Value: boolean;
	/** Determines whether selecting the RenderSelectable toggles `Selected`. */
	Toggles: boolean;
	/** Fired upon a change in value. */
	OnUpdated: SynSignal;
}
interface RenderChildBase extends RenderObject {
	/** Removes all sub-objects from this RenderChildBase. */
	Clear(): void;
	/** Sets a style option for this RenderChildBase. */
	SetStyle(option: RenderStyleOption, value: number | Vector2): void;
	/** Sets a color option for this RenderChildBase. */
	SetColor(option: RenderColorOption, color: Color3, alpha: number): void;
	/** Creates a RenderButton child object. */
	Button(): RenderButton;
	/** Creates a RenderCheckBox child object. */
	CheckBox(): RenderCheckBox;
	/** Creates a RenderColorPicker child object. */
	ColorPicker(): RenderColorPicker;
	/** Creates a RenderColorButton child object. */
	ColorButton(): RenderColorButton;
	/** Creates a RenderCombo child object. */
	Combo(): RenderCombo;
	/** Creates a RenderTextBox child object. */
	TextBox(): RenderTextBox;
	/** Creates a RenderLabel child object. */
	Label(): RenderLabel;
	/** Creates a RenderSlider child object. */
	Slider(): RenderSlider;
	/** Creates a RenderIntSlider child object. */
	IntSlider(): RenderIntSlider;
	/** Creates a RenderSelectable child object. */
	Selectable(): RenderSelectable;
	/** Creates a RenderSeparator child object. */
	Separator(): RenderSeparator;
	/** Creates a RenderTabMenu child object. */
	TabMenu(): RenderTabMenu;
	/** Creates a RenderSameLine child object. */
	SameLine(): RenderSameLine;
	/** Creates a RenderFont child object. */
	WithFont(): RenderFont;
	/** Creates a RenderIndent child object. */
	Indent(): RenderIndent;
	/** Creates a RenderCollapsable child object. */
	Collapsable(): RenderCollapsable;
	/** Creates a RenderChildWindow child object. */
	Child(): RenderChildWindow;
	/** Creates a RenderDummyWindow child object. */
	Dummy(): RenderDummyWindow;
}
interface RenderTabMenu extends RenderChildBase {
	/** The index of the selected tab, or zero if none are selected. */
	SelectedItem: number;
	/** Sets a style option for this RenderTabMenu's tabs. */
	SetTabStyle(options: RenderStyleOption, value: number | Vector2): void;
	/** Sets a color option for this RenderTabMenu's tabs. */
	SetTabColor(option: RenderColorOption, color: Color3, alpha: number): void;
	/** Creates a new tab. */
	Add(label: string): RenderDummyWindow;
	/** Fired upon tab change. */
	OnUpdated: SynSignal;
}
interface RenderCollapsable extends RenderChildBase {
	/** The header label of the RenderCollapsable. */
	HeaderLabel: string;
	/** Whether this RenderCollapsable was set to be open by default. */
	readonly DefaultOpen: boolean;
	/** Fired when the state of the RenderCollapsable changes from open to closed or vice versa. */
	OnUpdated: SynSignal;
}
interface RenderChildWindow extends RenderChildBase {
	/** The size of the child window. */
	Size: Vector2;
}
interface RenderSameLine extends RenderChildBase {}
interface RenderIndent extends RenderChildBase {
	/** The amount of pixels to indent. A negative number of pixels outdents; i.e. goes to the left instead of to the right. Indents by the IndentSpacing style if Pixels is zero. */
	Pixels: number;
}
interface RenderFont extends RenderChildBase {
	Font: DrawFont;
}
interface RenderPopup extends RenderChildBase {
	/** Shows this popup window. */
	Show(): void;
}
interface RenderDummyWindow extends RenderChildBase {}
interface RenderWindow extends RenderChildBase {
	/** The window's name. */
	readonly WindowName: string;
	/** A RenderWindow's minimum size. */
	MinSize: Vector2;
	/** A RenderWindow's maximum size. */
	MaxSize: Vector2;
	/** The initial size of the RenderWindow. */
	DefaultSize: Vector2;
	/** Determines whether this RenderWindow can be resized. */
	CanResize: boolean;
	/** Unties the window's visibility from that of the internal UI, and instead uses the `Visible` field. Best used with `setmousestate`. */
	VisibilityOverride: boolean;
	/** If the window is not already in the render list, add it. Optionally changes the title window. */
	Emplace(new_name?: string): void;
}
declare const RenderWindow: { new (window_name: string): RenderWindow };
