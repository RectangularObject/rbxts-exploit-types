// noinspection JSUnusedGlobalSymbols

/** Copies a string or Instance or table of Instances to the clipboard. Returns true on success. */
declare function setclipboard(data: string | number | Instance | unknown[]): boolean;
/** Sets FFlag `fflag` to value. Returns false if the flag doesn't exist or couldn't be set. */
declare function setfflag(fflag: string, value: string): boolean;
/** Returns "Synapse X" and version string. */
declare function identifyexecutor(): LuaTuple<[string, string]>;
/** "Unlocks" `module` such that code running at different contexts (e.g. level 2 vs level 7) return the same values when required. */
declare function unlockmodulescript(module: ModuleScript): void;
/** A wrapper around Microsoft's [MessageBoxA](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxa). */
declare function messagebox(test: string, caption?: string, type?: number): number;
/** Sets the title of the game window. A wrapper around Microsoft's [SetWindowTextA](https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowtexta). */
declare function setwindowtitle(test: string): void;
/** Sets the icon of the game window. */
declare function setwindowicon(data: string): void;
/** Returns a protected container where GUIs can be hidden from detection by the game. */
declare function gethui(): Instance;
/** Creates a tab in the external UI */
declare function createuitab(title: string, contents: string, icon?: string): void;
/** Creates a table with the specified array and hash sizes, then fills with random data. Random data for hash part has random vector keys with X, Y, and Z values between 0 and 1 and `false` as a value. Random data for array part has `false` as a value. This function is useful for creating tables with memory hidden to scripts. If you would like this feature, make sure `narray` is >= 33 and `nhash` is >= 17. NOTE: To prevent table reallocation from exposing this memory, make sure you don't have fewer array/hash values! */
declare function newtable(narray: number, nhash: number): unknown[];
/** Clones a reference to an Instance. The Lua expression clone `==` instance will be false, but both values will point to the same Instance. */
declare function cloneref(instance: Instance): Instance;

/** Returns a table of all the Instances that are descendants of `instance`. Undocumented */
declare function getweakdescendants(instance: Instance): Instance[];
