// noinspection JSUnusedGlobalSymbols

/** Equivalent to Lua 5.1's [loadstring](http://www.lua.org/manual/5.1/manual.html#pdf-loadstring). This function may access the thread's global environment (`getfenv(0)`) to resolve/cache imports and builtins. */
declare function loadstring(source: string, chunk_name?: string): Callback;
/** Returns true if the current thread is owned by Synapse. */
declare function checkcaller(): boolean;
/** Returns true if the current thread is owned by Synapse AND all functions at or above `level` in the call stack are Synapse functions. A level of `1` represents the function calling checkcallstack, `2` represents the function calling the function calling checkcallstack, and so forth. */
declare function checkcallstack(type: string, level?: number): boolean;
/** Returns true if `f` is a Synapse function. */
declare function issynapsefunction(f: Callback): boolean;
/** Returns true if `f` is a Lua function (as opposed to a C function). */
declare function islclosure(f: Callback): boolean;
/** Decompiles `target` asynchronously. `target` cannot be a Synapse function. */
declare function decompile(target: Callback | LuaSourceContainer): string;
/** Returns the main Lua thread associated with `script`. Note that this may not be the only thread used! */
declare function getscriptthread(script: LuaSourceContainer): thread;
/** Returns the Lua environment (such as that returned by getfenv) associated with the main function of `script`. Essentially equivalent to getfenv(getscriptfunction(script)).
 *
 * **WARNING:** Scripts may add a metatable to this value and check who's accessing it! If you want to get around this, check for whether the environment has a metatable and use `syn.trampoline_call` accordingly. */
declare function getsenv(script: LuaSourceContainer): Record<string, unknown>;
/** Returns the main function associated with `script`. */
declare function getscriptfunction(script: LuaSourceContainer): Callback;
/** Returns a script's bytecode hash. */
declare function getscripthash(script: LuaSourceContainer): string;
/** Returns a Lua function's bytecode hash. */
declare function getfunctionhash(script: Callback): string;
/** Returns the name of a script when it was first loaded. */
declare function getscriptname(script: LuaSourceContainer): string;
/** Dumps a function or script to the Luau bytecode format. `target` cannot be a Synapse function. */
declare function dumpbytecode(target: Callback | LuaSourceContainer): string;
/** Returns the script associated with the current thread or nil. */
declare function getcallingscript(): LocalScript | ModuleScript | undefined;
/** Returns true if `thread` is owned by Synapse. */
declare function issynapsethread(thread: thread): boolean;
/** Changes whether `target_thread` (or the current thread if `target_thread` is nil) can pass through `checkcaller`. If this is not the case, Synapse-specific overrides like `game.HttpGet` or `Connection.Enabled` will not work. */
declare function setsynapsethread(set_to_synapse: boolean, target_thread?: thread): void;
