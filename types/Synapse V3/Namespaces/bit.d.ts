// noinspection JSUnusedGlobalSymbols

/** All `bit` library functions take 32-bit unsigned integers and return a *signed* 32-bit result. Take note of this when implementing. If you want unsigned results, we suggest using the {@link bit32} library. */
declare namespace bit {
	/** Adds 2 or more integers. */
	function badd(...args: number[]): number;
	/** Subtracts 2 or more integers (from left to right). */
	function bsub(...args: number[]): number;
	/** Multiplies 2 or more integers. */
	function bmul(...args: number[]): number;
	/** Divides 2 or more integers (from left to right). */
	function bdiv(...args: number[]): number;
	/** Performs bitwise AND on 2 or more integers. */
	function band(...args: number[]): number;
	/** Performs bitwise OR on 2 or more integers. */
	function bor(...args: number[]): number;
	/** Performs bitwise XOR on 2 or more integers. */
	function bxor(...args: number[]): number;
	/** Performs bitwise NOT on an integer. */
	function bnot(...args: number[]): number;
	/** Shifts `value` left by `n` bits. */
	function lshift(value: number, n: number): number;
	/** Shifts `value` right by `n` bits. */
	function rshift(value: number, n: number): number;
	/** Performs an arithmetic shift right on `value` by `n` bits. */
	function arshift(value: number, n: number): number;
	/** Rotates `value` left `n` bits. */
	function rol(value: number, n: number): number;
	/** Rotates `value` right `n` bits. */
	function ror(value: number, n: number): number;
	/** Returns the number of set bits in `value`. */
	function bpopcount(value: number): number;
	/** Inverts `value`'s endianness. */
	function bswap(value: number): number;
	/** Converts `value` to a hex string. */
	function tohex(value: number, nibbles?: number): number;
	/** Converts `value` into proper form for bitwise operations. */
	function tobit(value: number): number;
}
