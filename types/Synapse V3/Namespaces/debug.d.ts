// noinspection JSUnusedGlobalSymbols

// Has to be capitalized cause "debug" already exists in @rbxts
// Comment from 4lve: namespace merging works, if it has a uppercase letter on Debug it won't work
// eslint-disable-next-line roblox-ts/no-namespace-merging
declare namespace debug {
	/** Checks if `level` is a valid index level for the current thread or `t` if passed. */
	function validlevel(level: number, t?: thread): boolean;
	/** Returns a table with each index having fields for the `func` being executed at that call stack level, and the `currentline` if it is a Lua closure. Uses `t` instead of the callers thread if one is passed. */
	function getcallstack(t?: thread): object;
	/** Returns a table containing the inner prototypes of function f. Use `debug.getproto` with `activated` set to `true` to get a list of closures. */
	function getprotos(f: Callback | number | ProtoProxy): object;
	/** Gets the inner function of `f` at `index`.
	 *
	 * *Note*: If `activated` is true, it instead will return a table of functions. These are the closures of that proto that exist within the GC.
	 */
	function getproto<T extends boolean = true>(f: Callback | number | ProtoProxy, index?: number, activated?: T): T extends true ? Callback[] : ProtoProxy;
	/** Gets the method stack at level `index`. If `index` is not provided, a table is returned. */
	function getstack<T extends number | undefined = undefined>(level: number, index?: T): T extends number ? unknown : object;
	/** Sets a stack value at `index` for function at `level` to `value`. */
	function setstack(level: number, index: number, value: unknown): void;
	/** Retrieve the upvalues in function `fi` or at level `fi`. */
	function getupvalues(fi: Callback | number): object;
	/** Returns the upvalue with index `idx` in function or level `fi`. */
	function getupvalue(fi: Callback | number, index: number): unknown;
	/** Sets an upvalue at index `idx` in function or level `fi`. */
	function setupvalue(fi: Callback | number, index: number, value: unknown): void;
	/** Retrieve the constants in function `fi` or at level `fi`. */
	function getconstants(f: Callback | number | ProtoProxy, pseudo_indices?: boolean): object;
	/** Returns the constant at index `idx` in function `f` or level `f`. */
	function getconstant(f: Callback | number | ProtoProxy, index: number): unknown;
	/** Set constant `idx` to tuple `value` at level or function `f`. */
	function setconstant(f: Callback | number | ProtoProxy, index: number, value: unknown, pseudo_indices?: boolean): unknown;
	/** Equivalent to [getrawmetatable.]{@link getrawmetatable} */
	function getmetatable(t: object): typeof getrawmetatable;
	/** Equivalent to [setrawmetatable.]{@link setrawmetatable} */
	function setmetatable(t: object, mt: SynapseMetatable): typeof setrawmetatable;
	/** Equivalent to [getreg.]{@link getreg} */
	function getregistry(): typeof getreg;
	/** Returns a table with information about a function. */
	function getinfo(funcOrLvl: Callback | number): { source: string; short_src: string; linedefined: number; what: "Lua" | "C" | "main"; name: string; namewhat: "global" | "local" | "method" | "field" | ""; nups: number; func: Callback };
}
